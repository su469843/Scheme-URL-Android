apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.schemeurl"
    defaultConfig {
        applicationId "com.schemeurl"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {
            // 生产环境签名配置（通过 -PreleaseKeystoreFile 等属性注入）
            if (project.hasProperty('releaseKeystoreFile')) {
                println "🔐 Using production signing configuration"
                storeFile file(releaseKeystoreFile)
                storePassword project.findProperty('releaseStorePassword') ?: ""
                keyAlias project.findProperty('releaseKeyAlias') ?: ""
                keyPassword project.findProperty('releaseKeyPassword') ?: ""
            } else {
                println "⚠️  WARNING: Production signing config not found"
                // 留空，后面构建时会回退到 staging
            }
        }

        staging {
            println "🔧 Using staging signing configuration (fallback)"
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            // 生产版本配置
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            
            // 尝试使用release签名，如果不可用则使用staging签名
            def releaseSigning = signingConfigs.release
            if (releaseSigning != null && releaseSigning.storeFile != null && releaseSigning.storeFile.exists()) {
                signingConfig signingConfigs.release
                println "✅ Using production signing for release build"
            } else {
                signingConfig signingConfigs.staging
                println "⚠️  Fallback: Using staging signing for release build"
            }
        }
    }

    // 添加staging构建变体
    flavorDimensions "environment"
    productFlavors {
        staging {
            dimension "environment"
            applicationIdSuffix ".staging"
            versionNameSuffix "-STAGING"
            println "📦 Configuring staging build variant"
        }
        production {
            dimension "environment"
            println "📦 Configuring production build variant"
        }
    }

    // 配置默认构建变体
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("staging") && variant.buildType.name == "debug") {
            setIgnore(true) // 忽略staging的debug构建
        }
    }
}

// 添加一个任务来检查签名配置
task checkSigningConfigs {
    doLast {
        println "🔍 Checking signing configurations:"
        println " - Release config available: ${project.hasProperty('releaseKeystoreFile')}"
        println " - Store password provided: ${project.findProperty('releaseStorePassword') != null}"
        println " - Key alias provided: ${project.findProperty('releaseKeyAlias') != null}"
        
        if (signingConfigs.release.storeFile != null) {
            println "✅ Release keystore file: ${signingConfigs.release.storeFile}"
            println "✅ Release keystore exists: ${signingConfigs.release.storeFile.exists()}"
        } else {
            println "❌ Release keystore not configured"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
